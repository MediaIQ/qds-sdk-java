{"name":"qds-sdk-java","tagline":"A Java library that provides the tools you need to authenticate with, and use the Qubole Data Service API.","body":"## Qubole Data Service Java SDK\r\nA Java library that provides the tools you need to authenticate with, and use the Qubole Data Service API.\r\n\r\n## Installation\r\nThe SDK is available in The Central Repository. To use the SDK, add the following dependency to your Java application.\r\n\r\n```\r\n<dependency>\r\n    <groupId>com.qubole.qds-sdk-java</groupId>\r\n    <artifactId>qds-sdk-java</artifactId>\r\n    <version>THE-VERSION</version>\r\n</dependency>\r\n```\r\n\r\nNOTE: see the bullet below regarding Jersery 2.0\r\n\r\n## Usage\r\n\r\nIn your application initialization code, allocate a QdsClient object:\r\n\r\n```\r\nQdsConfiguration configuration = new DefaultQdsConfiguration(YOUR_API_KEY);\r\nQdsClient client = QdsClientFactory.newClient(configuration);\r\n```\r\n\r\nThen, make api calls as needed. E.g.\r\n\r\n```\r\nFuture<CommandResponse> hiveCommandResponseFuture = client\r\n    .command()\r\n    .hive()\r\n    .query(\"show tables;\")\r\n    .invoke();\r\nCommandResponse hiveCommandResponse = hiveCommandResponseFuture.get();\r\n...\r\n```\r\n\r\nAlternatively, you can use Jersey's callback mechanism. E.g.\r\n\r\n```\r\nInvocationCallback<CommandResponse> callback = new InvocationCallback<CommandResponse>()\r\n{\r\n    @Override\r\n    public void completed(CommandResponse clusterItems)\r\n    {\r\n        // ...\r\n    }\r\n\r\n    @Override\r\n    public void failed(Throwable throwable)\r\n    {\r\n        // ...\r\n    }\r\n};\r\nclient.command()\r\n    .hive()\r\n    .query(\"show tables;\")\r\n    .withCallback(callback)\r\n    .invoke();\r\n...\r\n```\r\n\r\nAs part of your application's shutdown, close the client:\r\n\r\n```\r\nclient.close();\r\n```\r\n\r\n## Waiting for Results\r\n\r\nImportant: when you submit a command/query, it can take time for it to execute. You cannot get the result until it is ready.\r\nA utility is provided that polls the command and waits for the results: ResultLatch. You can use it to block in the foreground\r\nor using a callback.\r\n\r\nBlocking:\r\n```\r\nResultLatch latch = new ResultLatch(client, queryId);\r\nResultValue = latch.awaitResult();\r\n```\r\n\r\nWith callback:\r\n```\r\nResultLatch.Callback callback = new ResultLatch.Callback()\r\n{\r\n    @Override\r\n    public void result(String queryId, ResultValue resultValue)\r\n    {\r\n        // use results\r\n    }\r\n\r\n    @Override\r\n    public void error(String queryId, Exception e)\r\n    {\r\n        // handle error\r\n    }\r\n};\r\nResultLatch latch = new ResultLatch(client, queryId);\r\nlatch.callback(callback);\r\n```\r\n\r\n## Streaming Results\r\n\r\nSome Qubole APIs write large result sets to S3. If you would like to stream those results, use ResultStreamer.\r\nE.g.\r\n\r\n```\r\nResultStreamer streamer = new ResultStreamer(client);  // save this until the end of your application\r\n\r\n...\r\n\r\nFuture<ResultValue> results = client.command().results(id)...invoke();\r\nReader in = streamer.getResults(results.get());\r\n```\r\n\r\nAs part of your application's shutdown, close the client:\r\n\r\n```\r\nstreamer.close();\r\n```\r\n\r\n## Paging\r\n\r\nSome of the APIs support paging. These APIs have the \"forPage\" method. E.g.\r\n\r\n```\r\n// return page 2 using 3 per page\r\nclient.command().history().forPage(2, 3).invoke();\r\n```\r\n\r\n## APIs\r\n\r\nUsing the QdsClient, you can access any of the Qubole APIs:\r\n\r\n| API | Example |\r\n| --- | ------- |\r\n| [Reports](http://www.qubole.com/documentation/en/latest/rest-api/reports_api/index.html) | client.report().allCommandsReport().start_date(...).end_date(...).limit(...).invoke(); |\r\n| [Scheduler](http://www.qubole.com/documentation/en/latest/rest-api/scheduler_api/index.html) | client.scheduler().list().invoke(); |\r\n| [DbTaps](http://www.qubole.com/documentation/en/latest/rest-api/dbtap_api/index.html) | client.dbTaps().list().invoke(); |\r\n| [Hive Metadata](http://www.qubole.com/documentation/en/latest/rest-api/hive_metadata_api/index.html) | client.hiveMetadata().getTableProperties(\"table\").invoke(); |\r\n| [Cluster](http://www.qubole.com/documentation/en/latest/rest-api/cluster_api/index.html) | client.cluster().list().invoke(); |\r\n| [Command](http://www.qubole.com/documentation/en/latest/rest-api/command_api/index.html) | client.command().history().invoke(); |\r\n\r\n## Jersey 2.0\r\n\r\nThe SDK uses Jersey 2.0. Some widely used open source libraries such as Dropwizard are incompatible with Jersey 2.0.\r\nTo workaround this incompatiblity, you can build the SDK using the Maven shade plugin which will hide the SDK's usage\r\nof Jersey 2.0. To build a shaded version of the SDK, follow these steps:\r\n\r\n* Download the SDK. Either:\r\n * Clone the project: `git clone git@github.com:qubole/qds-sdk-java.git`\r\n * Or download one of the releases from https://github.com/qubole/qds-sdk-java/releases\r\n* cd to the directory\r\n* `mvn -P shaded install`\r\n\r\n## Javadoc\r\n\r\nhttps://qubole.github.io/qds-sdk-java/apidocs/latest/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}